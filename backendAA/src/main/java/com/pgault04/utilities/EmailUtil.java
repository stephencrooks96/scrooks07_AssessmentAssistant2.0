package com.pgault04.utilities;

import com.pgault04.entities.*;
import com.pgault04.repositories.ModuleAssociationRepo;
import com.pgault04.repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Component;

import java.text.ParseException;

/**
 * @author Paul Gault - 40126005
 * @since Jan 2019
 * Allows for emails to be sent out asynchronously to users in certain scenarios
 */
@EnableAsync
@Component
public class EmailUtil {

    /**
     * The email address any sent emails will come from
     */
    @Value("${app.email}")
    String SYSTEM_EMAIL_ADDRESS;

    /**
     * The url that needs to be sent out for users to follow to reach the site
     */
    @Value("${app.url}")
    String appUrl;

    /**
     * The url for the reset password link
     */
    @Value("${app.url.reset}")
    String resetUrl;

    @Autowired
    JavaMailSender emailSender;
    @Autowired
    UserRepo userRepo;
    @Autowired
    ModuleAssociationRepo moduleAssociationRepo;

    /**
     * Informs tutor that the request they have made to add a module has gone through and is pending approval
     *
     * @param to     - the tutor
     * @param module - the module
     */
    @Async
    public void sendNewModuleMessageFromSystemToTutor(String to, Module module) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject("New module added: " + module.getModuleName() + ", with ID: " + module.getModuleID());
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour new module has been added and is pending approval " +
                "from administrators, we will inform you when a change has been made.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Notifies user when they have been removed from a module
     *
     * @param to       - the user who has been removed
     * @param moduleID - the module they have been removed from
     */
    @Async
    public void sendRemovedFromModule(String to, Long moduleID) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject("Module Removal:");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour tutor has removed you from module: " + moduleID);
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Notifies user that they have been enrolled in a new module
     *
     * @param module - the module
     * @param user   - the user who is being enrolled
     */
    @Async
    public void sendEnrollmentMessageFromSystemToAssociate(Module module, User user) {
        SimpleMailMessage message = new SimpleMailMessage();
        User tutor = userRepo.selectByUserID(module.getTutorUserID());
        message.setTo(user.getUsername());
        message.setSubject("New module added: " + module.getModuleName());
        message.setText("This is an autogenerated email from Assessment Assistant:\nYou have been added to a new module by " + tutor.getUsername() +
                ".\nThe module will run from: " + module.getCommencementDate() + " - " + module.getEndDate() + "\nPlease log on to review your options for this module.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Emails a user to inform them that an admin has removed their account
     *
     * @param user - the user who has been removed
     */
    @Async
    public void emailDeleteUser(User user) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("User removed");
        message.setText("This is an autogenerated email from Assessment Assistant:\nSorry, the admins have decided to remove your Assessment Assistant account.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs a user that an account has been created for them
     *
     * @param user     - the new user
     * @param password - their randomly generated password
     * @param creator  - the user who created their account
     */
    @Async
    public void sendNewAccountMessageFromSystemToUser(User user, String password, String creator) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("Account Creation: " + user.getUsername());
        message.setText("This is an autogenerated email from Assessment Assistant:\nAn account has been created for you on assessment assistant by: " + creator + ".\nPlease log on using this temporary password: " + password);
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Sends an email to a user with the link to reset their password upon their request
     *
     * @param user          - the user who wants to reset
     * @param passwordReset - the object containing necessary password reset information
     */
    @Async
    public void sendPasswordResetMessageFromSystemToUser(User user, PasswordReset passwordReset) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("Password Reset for: " + user.getUsername());
        message.setText("This is an autogenerated email from Assessment Assistant:\n" +
                "You have requested to reset your password, to do so please navigate to the following link: "
                + appUrl + resetUrl + passwordReset.getResetString());
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs tutor that this module request has been improved
     *
     * @param module - the module which has been approved
     */
    @Async
    public void sendModuleRequestApproved(Module module) {
        SimpleMailMessage message = new SimpleMailMessage();
        User user = userRepo.selectByUserID(module.getTutorUserID());
        message.setTo(user.getUsername());
        message.setSubject("Module request approved.");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour module request has been approved.\nFor: " + module.getModuleName() + "\nYou may now log on and use this module.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs tutor that their module request has been rejected
     *
     * @param module - the module which has been rejected
     */
    @Async
    public void sendModuleRequestRejected(Module module) {
        SimpleMailMessage message = new SimpleMailMessage();
        User user = userRepo.selectByUserID(module.getTutorUserID());
        message.setTo(user.getUsername());
        message.setSubject("Module request rejected.");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour module request has been rejected.\nFor: " + module.getModuleName() + "\nPlease pick a more suitable module and try again.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs user that their request to become a tutor has been approved
     *
     * @param user - the user who is now a tutor
     */
    @Async
    public void sendTutorRequestApproved(User user) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("Tutor request approved.");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour tutor request has been approved.\nYou have permission to create modules.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs user that they have been made an admin on the site
     *
     * @param user - the new admin
     */
    @Async
    public void sendAdminApproved(User user) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("You are now an admin.");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYou have been granted admin status.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs user that their request to become a tutor has been rejected
     *
     * @param user - the user who has been rejected to be a tutor
     */
    @Async
    public void sendTutorRequestRejected(User user) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("Tutor request rejected.");
        message.setText("This is an autogenerated email from Assessment Assistant:\nYour tutor request has been rejected.\nPlease update your reason and try again at a later date.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs admins that a new tutor request has been made
     *
     * @param tutorRequests - the tutor request info
     * @param addedBy       - who added it
     * @param to            - who the email is being sent to
     */
    @Async
    public void sendTutorRequestMessageFromSystemToAdmin(TutorRequests tutorRequests, String addedBy, String to) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject("New tutor request added: " + addedBy);
        message.setText("This is an autogenerated email from Assessment Assistant:\nA new tutor request has been added by " + addedBy + ".\nWith reason:\n" + tutorRequests.getReason() + "\nPlease log on to review this.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs admin(s) that a new module has been added and requires their approval
     *
     * @param module  - the module added
     * @param addedBy - who added it
     * @param to      - the admin who is being informed
     */
    @Async
    public void sendNewModuleMessageFromSystemToAdmin(Module module, String addedBy, String to) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject("New module added: " + module.getModuleName() + ", with ID: " + module.getModuleID());
        message.setText("This is an autogenerated email from Assessment Assistant:\nA new module has been added by " + addedBy + " please log on to review this.");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }

    /**
     * Informs student that a new test has been scheduled for them to take
     *
     * @param test   - the test
     * @param user   - the user being emailed
     * @param module - the module
     * @throws ParseException thrown if date is not convertible
     */
    @Async
    public void sendNewTestEmail(Tests test, User user, Module module) throws ParseException {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(user.getUsername());
        message.setSubject("New test added: For module: " + module.getModuleID());
        message.setText("This is an autogenerated email from Assessment Assistant:\nA new " + (test.getPractice() == 0 ? "Official" : "Practice") + " test named " + test.getTestTitle() + " has been added for module " + module.getModuleName() + " this test will run from " + StringToDateUtil.convertReadableFormat(test.getStartDateTime()) + " to " + StringToDateUtil.convertReadableFormat(test.getEndDateTime()) + ".\nLog on during this time to participate in this test.\nThanks,\nAssessment Assistant");
        message.setFrom(SYSTEM_EMAIL_ADDRESS);
        emailSender.send(message);
    }
}